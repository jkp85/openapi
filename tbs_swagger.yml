swagger: '2.0'
info:
  title: 3blades API
  version: "1.0"
host: api.3blades.ai
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
  - text/html
x-headers:
  - Content-Type: application/json
x-samples-languages: ['curl', 'python', 'javascript', 'node', 'ruby', 'php', 'go', 'csharp', 'java', 'swift']
securityDefinitions:
  jwt:
    description: |
      A valid JSON Web Token (JWT) must be passed for all operations except for those in the `/auth` route. A JWT can be retrieved from the `/auth/jwt-token-auth` endpoint.

      The following syntax is required:

        Authorization: Bearer <token>
    type: apiKey
    name: Authorization
    in: header
security:
  - jwt: []
paths:
  /auth/jwt-token-auth/:
    post:
      operationId: auth_jwt-token-auth
      responses:
        '201':
          description: 'JWT created'
          schema:
            $ref: '#/definitions/JWT'
          examples:
            application/json: { "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ" }
        '400':
          description: 'Invalid data supplied'
          schema:
            $ref: '#/definitions/JWTError'
      parameters:
        - name: jwt_data
          in: body
          schema:
            $ref: '#/definitions/JWTData'
      consumes:
        - application/json
      summary: 'Create JSON Web Token (JWT)'
      tags:
        - auth
      security: []
  /auth/jwt-token-refresh/:
    post:
      operationId: auth_jwt-token-refresh
      responses:
        '201':
          description: 'RefreshJSONWebToken created'
          schema:
            $ref: '#/definitions/RefreshJSONWebToken'
        '400':
          description: 'Invalid data supplied'
          schema:
            $ref: '#/definitions/RefreshJSONWebTokenError'
      parameters:
        - name: refreshjwt_data
          in: body
          schema:
            $ref: '#/definitions/RefreshJSONWebTokenData'
      summary: 'Refresh a JSON Web Token (JWT)'
      description: 'Obtains a new JSON Web Token using existing user credentials.'
      consumes:
        - application/json
      tags:
        - auth
      security: []
  /auth/jwt-token-verify/:
    post:
      operationId: auth_jwt-token-verify
      responses:
        '201':
          description: 'VerifyJSONWebToken created'
          examples:
            application/json: { "token" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ" }
          schema:
            $ref: '#/definitions/VerifyJSONWebToken'
        '400':
          description: 'Invalid data supplied'
          schema:
            $ref: '#/definitions/VerifyJSONWebTokenError'
      parameters:
        - name: verifyjwt_data
          in: body
          schema:
            $ref: '#/definitions/VerifyJSONWebTokenData'
      summary: 'Validate JSON Web Token (JWT)'
      description: 'Checks veraciy of token.'
      consumes:
        - application/json
      tags:
        - auth
      security: []
  '/auth/login/{provider}/':
    get:
      operationId: oauth_login
      responses:
        '302':
          description: "Redirect to backend auth page"
      parameters:
        - name: provider
          in: path
          required: true
          description: "OAuth2 provider"
          type: string
          enum:
            - github
            - google
            - slack
      tags:
        - auth
  /auth/register/:
    post:
      operationId: auth_register
      responses:
        '201':
          description: 'User created'
          examples:
            application/json: {"id":"536686d7-0096-4c72-a4c3-5d710a361a0a","username":"johndoe","email":"user@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"I like tests","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}}
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid data supplied'
          schema:
            $ref: '#/definitions/UserError'
      parameters:
        - name: user_data
          in: body
          schema:
            $ref: '#/definitions/UserData'
      summary: 'Register a user'
      description: 'User registration requires confirming email address to activate user.'
      consumes:
        - application/json
      tags:
        - auth
      security: []
  '/v1/{namespace}/billing/cards/':
    get:
      operationId: billing_cards_list
      responses:
        '200':
          description: 'Card list'
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Set limit when retrieving credit or debit cards.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Set offset when retriving cards.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Order when retrieving cards.'
          type: string
      summary: 'Get credit cards'
      tags:
        - billing
    post:
      operationId: billing_cards_create
      responses:
        '201':
          description: 'Card created'
          examples:
            application/json: {"name": "John Doe","address_line1": "3423 Piedmont Rd NE","address_line2": "","address_city": "Atlanta","address_state": "Georgia","address_zip": "30305","address_country": "United States","exp_month": 1,"exp_year": 2019,"id": "4126086e-525a-4027-b9e7-ae8de47210b2","customer": "7e102c7b-55cd-49a0-9b23-58865eba1cc3","address_line1_check": "pass","address_zip_check": "pass","brand": "Visa","cvc_check": "","last4": "4242","fingerprint": "WpZ4zQymdmF5LhbH","funding": "credit","stripe_id": "card_1Aj8HuLUHPUzUsaQlDbaXjzA","created": "2017-07-24T15:16:07.995380Z"}
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: 'Invalid data supplied'
          schema:
            $ref: '#/definitions/CardError'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: card_data
          in: body
          schema:
            $ref: '#/definitions/CardDataPost'
      summary: 'Create new credit card'
      consumes:
        - application/json
      tags:
        - billing
  '/v1/{namespace}/billing/cards/{id}/':
    get:
      operationId: billing_cards_read
      responses:
        '200':
          description: 'Card retrieved.'
          examples:
            application/json: {"name": "John Doe","address_line1": "3423 Piedmont Rd NE","address_line2": "","address_city": "Atlanta","address_state": "Georgia","address_zip": "30305","address_country": "United States","exp_month": 1,"exp_year": 2019,"id": "4126086e-525a-4027-b9e7-ae8de47210b2","customer": "7e102c7b-55cd-49a0-9b23-58865eba1cc3","address_line1_check": "pass","address_zip_check": "pass","brand": "Visa","cvc_check": "","last4": "4242","fingerprint": "WpZ4zQymdmF5LhbH","funding": "credit","stripe_id": "card_1Aj8HuLUHPUzUsaQlDbaXjzA","created": "2017-07-24T15:16:07.995380Z"}
          schema:
            $ref: '#/definitions/Card'
        '404':
          description: 'Card not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'User unique identifier expressed as UUID.'
          type: string
      summary: 'Get credit card by id'
      tags:
        - billing
    put:
      operationId: billing_cards_replace
      responses:
        '200':
          description: 'Card updated'
          examples:
            application/json: {"name": "John Doe","address_line1": "3423 Piedmont Rd NE","address_line2": "","address_city": "Atlanta","address_state": "Georgia","address_zip": "30305","address_country": "United States","exp_month": 1,"exp_year": 2027,"id": "4126086e-525a-4027-b9e7-ae8de47210b2","customer": "7e102c7b-55cd-49a0-9b23-58865eba1cc3","address_line1_check": "pass","address_zip_check": "pass","brand": "Visa","cvc_check": "","last4": "4242","fingerprint": "WpZ4zQymdmF5LhbH","funding": "credit","stripe_id": "card_1Aj8HuLUHPUzUsaQlDbaXjzA","created": "2017-07-24T15:16:07.995380Z"}
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/CardError'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: ''
          type: string
        - name: card_data
          in: body
          schema:
            $ref: '#/definitions/CardDataPutandPatch'
      consumes:
        - application/json
      summary: 'Replace a credit card'
      tags:
        - billing
    patch:
      operationId: billing_cards_update
      responses:
        '200':
          description: 'Card updated'
          examples:
            application/json: {"name": "John Doe","address_line1": "3423 Piedmont Rd NE","address_line2": "","address_city": "Atlanta","address_state": "Georgia","address_zip": "30305","address_country": "United States","exp_month": 1,"exp_year": 2025,"id": "4126086e-525a-4027-b9e7-ae8de47210b2","customer": "7e102c7b-55cd-49a0-9b23-58865eba1cc3","address_line1_check": "pass","address_zip_check": "pass","brand": "Visa","cvc_check": "","last4": "4242","fingerprint": "WpZ4zQymdmF5LhbH","funding": "credit","stripe_id": "card_1Aj8HuLUHPUzUsaQlDbaXjzA","created": "2017-07-24T15:16:10.806003Z"}
          schema:
            $ref: '#/definitions/Card'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/CardUpdateError'
        '404':
          description: Card not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Card unique identifier.'
          type: string
        - name: card_data
          in: body
          schema:
            $ref: '#/definitions/CardDataPutandPatch'
      consumes:
        - application/json
      summary: 'Update a credit card'
      tags:
        - billing
    delete:
      operationId: billing_cards_delete
      responses:
        '204':
          description: 'Card deleted.'
        '404':
          description: 'Card not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Card unique identifier expressed as UUID.'
          type: string
      summary: 'Delete a credit card'
      tags:
        - billing
  '/v1/{namespace}/billing/invoices/':
    get:
      operationId: billing_invoices_list
      responses:
        '200':
          description: 'Invoice list.'
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/Invoice'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting items.'
          type: string
      summary: 'Get invoices'
      tags:
        - billing
  '/v1/{namespace}/billing/invoices/{id}/':
    get:
      operationId: billing_invoices_read
      responses:
        '200':
          description: 'Invoice retrieved.'
          schema:
            $ref: '#/definitions/Invoice'
        '404':
          description: 'Invoice not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Invoice unique identifier expressed as UUID.'
          type: string
      summary: 'Get an invoice'
      tags:
        - billing
  '/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/':
    get:
      operationId: billing_invoice_items_list
      responses:
        '200':
          description: 'InvoiceItem list.'
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/InvoiceItem'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: invoice_id
          required: true
          in: path
          description: 'Invoice id, expressed as UUID.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting items.'
          type: string
      summary: 'Get invoice items for a given invoice.'
      tags:
        - billing
  '/v1/{namespace}/billing/invoices/{invoice_id}/invoice-items/{id}':
    get:
      operationId: billing_invoice_items_read
      responses:
        '200':
          description: 'InvoiceItem retrieved.'
          schema:
            $ref: '#/definitions/InvoiceItem'
        '404':
          description: 'InvoiceItem not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: invoice_id
          required: true
          in: path
          description: 'Invoice id, expressed as UUID.'
          type: string
        - name: id
          required: true
          in: path
          description: 'InvoiceItem id, expressed as UUID.'
          type: string
      summary: 'Get a specific InvoiceItem.'
      tags:
        - billing
  '/v1/{namespace}/billing/plans/':
    get:
      operationId: billing_plans_list
      responses:
        '200':
          description: 'Plan list.'
          examples:
            application/json: [{"id": "d5791ab3-aefb-45af-80fc-2c7a166d78eb","stripe_id": "post_billing_plan","created": "2017-07-24T15:46:39Z","metadata": {},"livemode": false,"amount": 20,"currency": "usd","interval": "year","interval_count": 1,"name": "patch_billing_plan","statement_descriptor": "","trial_period_days": 7},{"id": "256fd63a-9d6b-48d2-8ff5-f56eaf54c59b","stripe_id": "post_billing_plan_2","created": "2017-07-24T15:46:48Z","metadata": {},"livemode": false,"amount": 20,"currency": "usd","interval": "week","interval_count": 52,"name": "post_billing_plan_2","statement_descriptor": "","trial_period_days": 7},{"id": "5915a2ae-12f5-4927-bb26-3b0609228791","stripe_id": "post_billing_plan_3","created": "2017-07-24T15:46:52Z","metadata": {},"livemode": false,"amount": 20,"currency": "usd","interval": "month","interval_count": 12,"name": "post_billing_plan_3","statement_descriptor": "","trial_period_days": 7}]
          schema:
            type: array
            items:
              $ref: '#/definitions/Plan'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting items.'
          type: string
      summary: 'Get billing plans'
      tags:
        - billing
  '/v1/{namespace}/billing/plans/{id}/':
    get:
      operationId: billing_plans_read
      responses:
        '200':
          description: Plan retrieved
          examples:
            application/json: {"id": "d5791ab3-aefb-45af-80fc-2c7a166d78eb","stripe_id": "post_billing_plan","created": "2017-07-24T15:46:39Z","metadata": {},"livemode": false,"amount": 20,"currency": "usd","interval": "year","interval_count": 1,"name": "post_billing_plan","statement_descriptor": "","trial_period_days": 7}
          schema:
            $ref: '#/definitions/Plan'
        '404':
          description: Plan not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Plan unique identifier expressed as UUID.'
          type: string
      summary: 'Get a billing plan'
      tags:
        - billing
  '/v1/{namespace}/billing/subscriptions/':
    get:
      operationId: billing_subscriptions_list
      responses:
        '200':
          description: 'Subscription list.'
          examples:
            application/json: [{"id": "579208c3-4f5c-4b5d-baa3-309a06db681c","plan": "efb36cb0-0ef2-4af3-ae5d-10d9ae73845d","stripe_id": "sub_B5KyO9BZ6lUNPP","created": "2017-07-24T17:25:04Z","livemode": false,"application_fee_percent": 0,"cancel_at_period_end": false,"canceled_at": "","current_period_start": "2017-07-24T17:25:04Z","current_period_end": "2017-07-31T17:25:04Z","start": "2017-07-24T17:25:04Z","ended_at": "","quantity": 1,"status": "trialing","trial_start": "2017-07-24T17:25:04Z","trial_end": "2017-07-31T17:25:04Z"}]
          schema:
            type: array
            items:
              $ref: '#/definitions/Subscription'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting items.'
          type: string
      summary: 'Get active subscriptons'
      tags:
        - billing
    post:
      operationId: billing_subscriptions_create
      responses:
        '201':
          description: Subscription created
          examples:
            application/json: {"id": "579208c3-4f5c-4b5d-baa3-309a06db681c","plan": "efb36cb0-0ef2-4af3-ae5d-10d9ae73845d","stripe_id": "sub_B5KyO9BZ6lUNPP","created": "2017-07-24T17:25:04Z","livemode": false,"application_fee_percent": 0,"cancel_at_period_end": false,"canceled_at": "","current_period_start": "2017-07-24T17:25:04Z","current_period_end": "2017-07-31T17:25:04Z","start": "2017-07-24T17:25:04Z","ended_at": "","quantity": 1,"status": "trialing","trial_start": "2017-07-24T17:25:04Z","trial_end": "2017-07-31T17:25:04Z"}
          schema:
            $ref: '#/definitions/Subscription'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/SubscriptionError'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: subscription_data
          in: body
          schema:
            $ref: '#/definitions/SubscriptionData'
      consumes:
        - application/json
      summary: 'Create a new subscription'
      tags:
        - billing
  '/v1/{namespace}/billing/subscriptions/{id}/':
    get:
      operationId: billing_subscriptions_read
      responses:
        '200':
          description: 'Subscription retrieved.'
          schema:
            $ref: '#/definitions/Subscription'
        '404':
          description: 'Subscription not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Unique identifier expressed as UUID.'
          type: string
      summary: 'Get a subscriptions'
      tags:
        - billing
    delete:
      operationId: billing_subscriptions_delete
      responses:
        '204':
          description: 'Subscription deleted.'
        '404':
          description: 'Subscription not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Subscription unique identifier expressed as UUID.'
          type: string
      summary: 'Delete a subscription'
      tags:
        - billing
  '/v1/{namespace}/hosts/':
    get:
      operationId: hosts_list
      responses:
        '200':
          description: 'DockerHost list.'
          schema:
            type: array
            items:
              $ref: '#/definitions/DockerHost'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team data.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limite when getting items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting items.'
          type: string
        - name: name
          required: false
          in: query
          description: 'Name, when getting items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting items.'
          type: string
      summary: 'Get available hosts'
      tags:
        - hosts
    post:
      operationId: hosts_create
      responses:
        '201':
          description: 'DockerHost created successfully.'
          schema:
            $ref: '#/definitions/DockerHost'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/DockerHostError'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: dockerhost_data
          in: body
          schema:
            $ref: '#/definitions/DockerHostData'
      consumes:
        - application/json
      summary: 'Create a new host'
      tags:
        - hosts
  '/v1/{namespace}/hosts/{host}/':
    get:
      operationId: hosts_read
      responses:
        '200':
          description: 'DockerHost retrieved.'
          schema:
            $ref: '#/definitions/DockerHost'
        '404':
          description: 'DockerHost not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: host
          required: true
          in: path
          description: 'Unique identifier expressed as UUID or name.'
          type: string
      summary: 'Get a host'
      tags:
        - hosts
    put:
      operationId: hosts_replace
      responses:
        '200':
          description: 'DockerHost updated.'
          schema:
            $ref: '#/definitions/DockerHost'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/DockerHostError'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: host
          required: true
          in: path
          description: ''
          type: string
        - name: dockerhost_data
          in: body
          schema:
            $ref: '#/definitions/DockerHostData'
      consumes:
        - application/json
      summary: 'Replace a host'
      tags:
        - hosts
    patch:
      operationId: hosts_update
      responses:
        '200':
          description: DockerHost updated
          schema:
            $ref: '#/definitions/DockerHost'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/DockerHostError'
        '404':
          description: DockerHost not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: host
          required: true
          in: path
          description: ''
          type: string
        - name: dockerhost_data
          in: body
          schema:
            $ref: '#/definitions/DockerHostData'
      consumes:
        - application/json
      summary: 'Update a host'
      tags:
        - hosts
    delete:
      operationId: hosts_delete
      responses:
        '204':
          description: 'DockerHost deleted.'
        '404':
          description: 'DockerHost not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: host
          required: true
          in: path
          description: 'DockerHost unique identifier expressed as UUID.'
          type: string
      summary: 'Delete a host'
      tags:
        - hosts
  '/v1/{namespace}/projects/':
    get:
      operationId: projects_list
      responses:
        '200':
          description: 'Project list.'
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting data.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting data.'
          type: string
        - name: private
          required: false
          in: query
          description: 'Private project or public project.'
          type: string
        - name: name
          required: false
          in: query
          description: 'Project name.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting projects.'
          type: string
      summary: 'Get available projects'
      tags:
        - projects
    post:
      operationId: projects_create
      responses:
        '201':
          description: Project created
          examples:
            application/json: {"id": "79cadd17-5738-4f02-8377-68e67d3eee18","name": "myProject","description": "Project created by me","private": false,"last_updated": "2017-07-24T14:54:38.797878Z","owner": "johndoe","collaborators": ["johndoe"]}
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/ProjectError'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: project_data
          in: body
          schema:
            $ref: '#/definitions/ProjectData'
      consumes:
        - application/json
      summary: 'Create a new project'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/':
    get:
      operationId: projects_read
      responses:
        '200':
          description: 'Project retrieved.'
          examples:
            application/json: {"id": "79cadd17-5738-4f02-8377-68e67d3eee18","name": "myProject","description": "Project created by me","private": false,"last_updated": "2017-07-24T14:54:38.797878Z","owner": "johndoe","collaborators": ["johndoe"]}
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: 'Project not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
      summary: 'Get a project'
      tags:
        - projects
    put:
      operationId: projects_replace
      responses:
        '200':
          description: 'Project updated.'
          examples:
            application/json: {"id": "79cadd17-5738-4f02-8377-68e67d3eee18","name": "myProject","description": "My project updated by me using PUT","private": true,"last_updated": "2017-07-24T14:54:43.225603Z","owner": "johndoe","collaborators": ["johndoe"]}
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/Project'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team namespace.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: project_data
          in: body
          schema:
            $ref: '#/definitions/ProjectData'
      consumes:
        - application/json
      summary: 'Replace a project'
      tags:
        - projects
    patch:
      operationId: projects_update
      responses:
        '200':
          description: Project updated
          examples:
            application/json: {"id": "79cadd17-5738-4f02-8377-68e67d3eee18","name": "myProject","description": "My project updated by me using PATCH","private": true,"last_updated": "2017-07-24T14:54:43.225603Z","owner": "johndoe","collaborators": ["johndoe"]}
          schema:
            $ref: '#/definitions/Project'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/ProjectError'
        '404':
          description: Project not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: project_data
          in: body
          schema:
            $ref: '#/definitions/ProjectData'
      consumes:
        - application/json
      summary: 'Update a project'
      tags:
        - projects
    delete:
      operationId: projects_delete
      responses:
        '204':
          description: 'Project deleted.'
        '404':
          description: 'Project not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
      summary: 'Delete a project'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/collaborators/':
    get:
      operationId: projects_collaborators_list
      responses:
        '200':
          description: 'Collaborator list.'
          examples:
            application/json: [{"id": "42946cd9-2fb6-4764-944b-e107b972dd97","owner": true,"joined": "2017-07-24T14:54:38.819171Z","username": "johndoe","email": "johndoe@example.com","first_name": "John","last_name": "Doe","permissions": ["read_project","write_project"]}]
          schema:
            type: array
            items:
              $ref: '#/definitions/Collaborator'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when retrieving items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when retrieving items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when retrieving items.'
          type: string
      summary: 'Get project collaborators'
      tags:
        - projects
    post:
      operationId: projects_collaborators_create
      responses:
        '201':
          description: 'Collaborator created.'
          examples:
            application/json: {"id": "ef4d3a93-ae36-428c-b00f-5805b496ed95","owner": false,"joined": "2017-07-24T14:54:49.205912Z","username": "collaborator","email": "collaborator@examples.com","first_name": "John","last_name": "Doe","permissions": ["read_project","write_project"]}
          schema:
            $ref: '#/definitions/Collaborator'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/CollaboratorError'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: collaborator_data
          in: body
          schema:
            $ref: '#/definitions/CollaboratorData'
      consumes:
        - application/json
      summary: 'Create project collaborators'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/collaborators/{collaborator}/':
    get:
      operationId: projects_collaborators_read
      responses:
        '200':
          description: 'Collaborator retrieved.'
          examples:
            application/json: {"id": "ef4d3a93-ae36-428c-b00f-5805b496ed95","owner": false,"joined": "2017-07-24T14:54:49.205912Z","username": "collaborator","email": "collaborator@3blades.ai","first_name": "John","last_name": "Doe","permissions": ["read_project","write_project"]}
          schema:
            $ref: '#/definitions/Collaborator'
        '404':
          description: 'Collaborator not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: collaborator
          required: true
          in: path
          description: 'Collaborator unique identifier expressed as UUID or name.'
          type: string
      summary: 'Get a project collaborator'
      tags:
        - projects
    patch:
      operationId: projects_collaborators_update
      responses:
        '200':
          description: Collaborator updated
          schema:
            $ref: '#/definitions/Collaborator'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/CollaboratorError'
        '404':
          description: Collaborator not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: ''
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: collaborator
          required: true
          in: path
          description: ''
          type: string
        - name: collaborator_data
          in: body
          schema:
            $ref: '#/definitions/CollaboratorData'
      consumes:
        - application/json
      summary: 'Update project collaborator'
      tags:
        - projects
    delete:
      operationId: projects_collaborators_delete
      responses:
        '204':
          description: 'Collaborator deleted.'
        '404':
          description: 'Collaborator not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: collaborator
          required: true
          in: path
          description: 'Collaborator unique identifier.'
          type: string
      summary: 'Delete a project collaborator'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/project_files/':
    get:
      operationId: projects_project_files_list
      responses:
        '200':
          description: ProjectFile list
          schema:
            type: array
            items:
              $ref: '#/definitions/ProjectFile'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Unique identifier for project file expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting project file list.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting project file list.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering of list values when getting project file list.'
          type: string
        - name: filename
          required: false
          in: query
          description: 'Exact file name, relative to the project root. If no such file is found, an empty list will be returned.'
          type: string
        - name: content
          required: false
          in: query
          description: 'Determines whether or not content is returned as base64. Defaults to false.'
          type: string
      summary: 'Get project files'
      tags:
        - projects
    post:
      operationId: projects_project_files_create
      responses:
        '201':
          description: ProjectFile created
          examples:
            application/json: {"id": "592ac8da-dbf5-4654-9127-8df9ba9280a3","project": "79cadd17-5738-4f02-8377-68e67d3eee18","file": "http://dev-api.3blades.ai/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/foo","public": false,"name": "myfile","path": ""}
          schema:
            $ref: '#/definitions/ProjectFile'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/ProjectFileError'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: file
          required: false
          in: formData
          description: 'File to send, to create new file. This parameter is only used with form data and may include multiple files.'
          type: file
        - name: base64_data
          required: false
          in: formData
          description: 'Fila data, represented as base64.'
          type: string
        - name: name
          required: false
          in: formData
          description: 'File name. May include path when creating file with base64 field.'
          type: string
        - name: path
          required: false
          in: formData
          description: 'File path. Defaults to (/).'
          type: string
      consumes:
        - multipart/form-data
        - application/json
      summary: 'Create project files'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/project_files/{id}/':
    get:
      operationId: projects_project_files_read
      responses:
        '200':
          description: 'ProjectFile retrieved'
          examples:
            application/json: {"id": "592ac8da-dbf5-4654-9127-8df9ba9280a3","project": "79cadd17-5738-4f02-8377-68e67d3eee18","file": "http://dev-api.3blades.ai/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile","public": false,"name": "myfile","path": ""}
          schema:
            $ref: '#/definitions/ProjectFile'
        '404':
          description: 'ProjectFile not found'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifer.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'File unique identifier.'
          type: string
        - name: content
          required: false
          in: query
          description: 'Determines whether or not content is returned as base64. Defaults to false.'
          type: string
      summary: 'Get a project file'
      tags:
        - projects
    put:
      operationId: projects_project_files_replace
      responses:
        '200':
          description: 'ProjectFile updated'
          examples:
            application/json: {"id": "592ac8da-dbf5-4654-9127-8df9ba9280a3","project": "79cadd17-5738-4f02-8377-68e67d3eee18","file": "/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile","public": false,"name": "myfile","path": ""}
          schema:
            $ref: '#/definitions/ProjectFile'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ProjectFileError'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifer.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'File unique identifier.'
          type: string
        - name: file
          required: false
          in: formData
          description: 'File to send, to create new file. This parameter is only used with form data and may include multiple files.'
          type: file
        - name: base64_data
          required: false
          in: formData
          description: 'Fila data, represented as base64.'
          type: string
        - name: name
          required: false
          in: formData
          description: 'File name. May include path when creating file with base64 field.'
          type: string
        - name: path
          required: false
          in: formData
          description: 'File path. Defaults to (/).'
          type: string
      consumes:
        - multipart/form-data
      summary: 'Replace a project file'
      tags:
        - projects
    patch:
      operationId: projects_project_files_update
      responses:
        '200':
          description: 'ProjectFile updated.'
          examples:
            application/json: {"id": "592ac8da-dbf5-4654-9127-8df9ba9280a3","project": "79cadd17-5738-4f02-8377-68e67d3eee18","file": "/media/johndoe/79cadd17-5738-4f02-8377-68e67d3eee18/myfile","public": false,"name": "foo","path": ""}
          schema:
            $ref: '#/definitions/ProjectFile'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ProjectFileError'
        '404':
          description: 'ProjectFile not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifer.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'File unique identifier.'
          type: string
        - name: file
          required: false
          in: formData
          description: 'File to send, to create new file. This parameter is only used with form data and may include multiple files.'
          type: file
        - name: base64_data
          required: false
          in: formData
          description: 'Fila data, represented as base64.'
          type: string
        - name: name
          required: false
          in: formData
          description: 'File name. May include path when creating file with base64 field.'
          type: string
        - name: path
          required: false
          in: formData
          description: 'File path. Defaults to (/).'
          type: string
      consumes:
        - multipart/form-data
      summary: 'Update a project file'
      tags:
        - projects
    delete:
      operationId: projects_project_files_delete
      responses:
        '204':
          description: ProjectFile deleted
        '404':
          description: ProjectFile not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifer.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'File unique identifier.'
          type: string
      summary: 'Delete a project file'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/':
    get:
      operationId: projects_servers_list
      responses:
        '200':
          description: 'Server list.'
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/Server'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit results when getting server list.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset results when getting server list.'
          type: string
        - name: name
          required: false
          in: query
          description: 'Server name.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering option when getting server list.'
          type: string
      summary: 'Retrieve servers'
      tags:
        - projects
    post:
      operationId: projects_servers_create
      responses:
        '201':
          description: 'Server created.'
          examples:
            application/json: {"id": "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3","name": "testPostServer","created_at": "2017-07-24T13:41:57.089722Z","image_name": "","server_size": "d16e2091-7596-481b-a50f-285812beb98c","startup_script": "","config": {"type": "jupyter"},"status": "Stopped","connected": [],"host": "","endpoint": "https://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree","logs_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/","status_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"}
          schema:
            $ref: '#/definitions/Server'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerError'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifer expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server_data
          in: body
          schema:
            $ref: '#/definitions/ServerData'
      consumes:
        - application/json
      summary: 'Create a new server'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/':
    get:
      operationId: projects_servers_read
      responses:
        '200':
          description: 'Server retrieved.'
          examples:
            application/json: {"id": "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3","name": "testPostServer","created_at": "2017-07-24T13:41:57.089722Z","image_name": "","server_size": "d16e2091-7596-481b-a50f-285812beb98c","startup_script": "","config": {"type": "jupyter"},"status": "Stopped","connected": [],"host": "","endpoint": "https://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree","logs_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/","status_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"}
          schema:
            $ref: '#/definitions/Server'
        '404':
          description: 'Server not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
      summary: 'Retrieve a server'
      tags:
        - projects
    put:
      operationId: projects_servers_replace
      responses:
        '200':
          description: 'Server updated.'
          examples:
            application/json: {"id": "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3","name": "testPutServer","created_at": "2017-07-24T13:41:57.089722Z","image_name": "","server_size": "d16e2091-7596-481b-a50f-285812beb98c","startup_script": "","config": {"type": "jupyter"},"status": "Stopped","connected": [],"host": "","endpoint": "https://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree","logs_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/","status_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"}
          schema:
            $ref: '#/definitions/Server'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerError'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: server_data
          in: body
          schema:
            $ref: '#/definitions/ServerData'
      consumes:
        - application/json
      summary: 'Replace a server'
      tags:
        - projects
    patch:
      operationId: projects_servers_update
      responses:
        '200':
          description: Server updated
          examples:
            application/json:
              {"id": "768f6eef-d07b-40ce-bce1-0dcce5bfbfc3","name": "testPatchServer","created_at": "2017-07-24T13:41:57.089722Z","image_name": "","server_size": "d16e2091-7596-481b-a50f-285812beb98c","startup_script": "","config": {"type": "jupyter"},"status": "Stopped","connected": [],"host": "","endpoint": "https://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/endpoint/jupyter/tree","logs_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/logs/","status_url": "wss://dev-api.3blades.ai/v1/johndoe/projects/d56271ef-eea7-44ad-8d46-828a288c7a3d/servers/768f6eef-d07b-40ce-bce1-0dcce5bfbfc3/status/"}
          schema:
            $ref: '#/definitions/Server'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/ServerData'
        '404':
          description: Server not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: server_data
          in: body
          schema:
            $ref: '#/definitions/ServerData'
      consumes:
        - application/json
      summary: 'Update a server'
      tags:
        - projects
    delete:
      operationId: projects_servers_delete
      responses:
        '204':
          description: Server deleted
        '404':
          description: Server not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'User unique identifier.'
          type: string
      summary: 'Delete a server'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/api-key/':
    get:
      operationId: projects_servers_api-key
      responses:
        '200':
          description: 'Server API key'
          schema:
            $ref: '#/definitions/JWT'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
      summary: 'Get server API key'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/start/':
    post:
      operationId: projects_servers_start
      responses:
        '201':
          description: 'Server started.'
        '400':
          description: 'Invalid data supplied.'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
      summary: 'Start a server'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/stop/':
    post:
      operationId: projects_servers_stop
      responses:
        '201':
          description: 'Server stopped.'
        '400':
          description: 'Invalid data supplied.'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
      summary: 'Stop a server'
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/':
    post:
      operationId: projects_servers_run-stats_create
      responses:
        '201':
          description: 'ServerRunStatistics created.'
          examples:
            application/json: {"id": "7d55fca5-2ba3-4af4-95ab-26dc141e6bfc","start": "2017-07-24T13:42:14.883820Z","stop": "","exit_code": 0,"size": 0,"stacktrace": ""}
          schema:
            $ref: '#/definitions/ServerRunStatistics'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerRunStatisticsError'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: serverrunstats_data
          in: body
          schema:
            $ref: '#/definitions/ServerRunStatisticsData'
      summary: "Create a new server's run statistics"
      consumes:
        - application/json
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/run-stats/{id}/':
    get:
      operationId: projects_servers_run-stats_read
      responses:
        '200':
          description: 'ServerRunStatistics retrieved.'
          schema:
            $ref: '#/definitions/ServerRunStatistics'
        '404':
          description: 'ServerRunStatistics not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Run statistics unique identifier expressed as UUID.'
          type: string
      summary: 'Retrieve statistics for a server'
      tags:
        - projects
    put:
      operationId: projects_servers_run-stats_replace
      responses:
        '200':
          description: 'ServerRunStatistics updated.'
          schema:
            $ref: '#/definitions/ServerRunStatistics'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerRunStatisticsError'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Server run statistics expressed as UUID.'
          type: string
        - name: serverrunstats_data
          in: body
          schema:
            $ref: '#/definitions/ServerRunStatisticsData'
      summary: "Replace a server's statistics"
      consumes:
        - application/json
      tags:
        - projects
    patch:
      operationId: projects_servers_run-stats_update
      responses:
        '200':
          description: 'ServerRunStatistics updated.'
          schema:
            $ref: '#/definitions/ServerRunStatistics'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerRunStatisticsError'
        '404':
          description: 'ServerRunStatistics not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Server run statistics unique identifier expressed as UUID.'
          type: string
        - name: serverrunstats_data
          in: body
          schema:
            $ref: '#/definitions/ServerRunStatisticsData'
      consumes:
        - application/json
      summary: "Update a server's statistics"
      tags:
        - projects
    delete:
      operationId: projects_servers_run-stats_delete
      responses:
        '204':
          description: 'ServerRunStatistics deleted.'
        '404':
          description: 'ServerRunStatistics not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Server run statistics unique identifier expressed as UUID.'
          type: string
      summary: "Delete a server's statistics"
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/':
    get:
      operationId: projects_servers_ssh-tunnels_list
      responses:
        '200':
          description: SshTunnel list
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/SshTunnel'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit retrieved items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset retrieved items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Order retrieved items.'
          type: string
      summary: "Get SSH Tunnels associated to a server"
      tags:
        - projects
    post:
      operationId: projects_servers_ssh-tunnels_create
      responses:
        '201':
          description: 'SSH Tunnel created.'
          schema:
            $ref: '#/definitions/SshTunnel'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/SshTunnelError'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: sshtunnel_data
          in: body
          schema:
            $ref: '#/definitions/SshTunnelData'
      consumes:
        - application/json
      summary: "Create SSH Tunnel associated to a server"
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/ssh-tunnels/{tunnel}/':
    get:
      operationId: projects_servers_ssh-tunnels_read
      responses:
        '200':
          description: 'SSH Tunnel retrieved.'
          schema:
            $ref: '#/definitions/SshTunnel'
        '404':
          description: 'SSH Tunnel not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: tunnel
          required: true
          in: path
          description: 'SSH tunnel unique identifier expressed as UUID or name.'
          type: string
      summary: "Get an SSH Tunnel associated to a server"
      tags:
        - projects
    put:
      operationId: projects_servers_ssh-tunnels_replace
      responses:
        '200':
          description: SshTunnel updated
          schema:
            $ref: '#/definitions/SshTunnel'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/SshTunnelError'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: tunnel
          required: true
          in: path
          description: 'SSH tunnel unique identifier expressed as UUID or name.'
          type: string
        - name: sshtunnel_data
          in: body
          schema:
            $ref: '#/definitions/SshTunnelData'
      consumes:
        - application/json
      summary: "Replace SSH Tunnel associated to a server"
      tags:
        - projects
    patch:
      operationId: projects_servers_ssh-tunnels_update
      responses:
        '200':
          description: ' SSH Tunnel updated.'
          schema:
            $ref: '#/definitions/SshTunnel'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/SshTunnelError'
        '404':
          description: 'SSH tunnel not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: ''
          type: string
        - name: project
          required: true
          in: path
          description: ''
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: tunnel
          required: true
          in: path
          description: ''
          type: string
        - name: sshtunnel_data
          in: body
          schema:
            $ref: '#/definitions/SshTunnelData'
      consumes:
        - application/json
      summary: "Update an SSH Tunnel associated to a server"
      tags:
        - projects
    delete:
      operationId: projects_servers_ssh-tunnels_delete
      responses:
        '204':
          description: 'SSH tunnel deleted.'
        '404':
          description: 'SSH tunnel not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: tunnel
          required: true
          in: path
          description: 'SSH tunnel unique identifier expressed as UUID or name.'
          type: string
      summary: "Delete an SSH Tunnel associated to a server"
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/stats/{id}/':
    get:
      operationId: projects_servers_stats_read
      responses:
        '200':
          description: ServerStatistics retrieved
          schema:
            $ref: '#/definitions/ServerStatistics'
        '404':
          description: ServerStatistics not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Server statistics unique identifier expressed as UUID.'
          type: string
      summary: "Retrieve a server's statistics"
      tags:
        - projects
    put:
      operationId: projects_servers_stats_replace
      responses:
        '200':
          description: ServerStatistics updated
          schema:
            $ref: '#/definitions/ServerStatistics'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerStatisticsError'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Server statistics unique identifier expressed as UUID.'
          type: string
        - name: serverstats_data
          in: body
          schema:
            $ref: '#/definitions/ServerStatisticsData'
      consumes:
        - application/json
      summary: "Replace a server's statistics"
      tags:
        - projects
    patch:
      operationId: projects_servers_stats_update
      responses:
        '200':
          description: 'ServerStatistics updated.'
          schema:
            $ref: '#/definitions/ServerStatistics'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerStatisticsError'
        '404':
          description: 'ServerStatistics not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Server statistics unique identifier expressed as UUID.'
          type: string
        - name: serverstats_data
          in: body
          schema:
            $ref: '#/definitions/ServerStatisticsData'
      consumes:
        - application/json
      summary: "Update a server's statistics"
      tags:
        - projects
    delete:
      operationId: projects_servers_stats_delete
      responses:
        '204':
          description: 'ServerStatistics deleted.'
        '404':
          description: 'ServerStatistics not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: id
          required: true
          in: path
          description: 'Stats unique identifier expressed as UUID.'
          type: string
      summary: "Delete a server's statistics"
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/triggers/':
    get:
      operationId: service_trigger_list
      responses:
        '200':
          description: ServerAction list
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/ServerAction'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: name
          required: false
          in: query
          description: 'Trigger name.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limit when getting triggers.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting triggers.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting triggers.'
          type: string
      summary: "Retrieve server triggers"
      tags:
        - projects
    post:
      operationId: service_trigger_create
      responses:
        '201':
          description: 'Server action created.'
          examples:
            application/json: {"id": "19938b2c-17f6-46ed-a506-f5b196853951","name": "serverStartPost","operation": "start","url": "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"}
          schema:
            $ref: '#/definitions/ServerAction'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/ServerActionError'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server_action
          in: body
          description: 'Server action.'
          schema:
            $ref: '#/definitions/ServerActionData'
      consumes:
        - application/json
      summary: "Create a new server trigger"
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/triggers/{trigger}/':
    get:
      operationId: service_trigger_read
      responses:
        '200':
          description: 'Server action retrieved.'
          examples:
            application/json: {"id": "19938b2c-17f6-46ed-a506-f5b196853951","name": "serverStartPost","operation": "start","url": "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"}
          schema:
            $ref: '#/definitions/ServerAction'
        '404':
          description: 'ServerAction not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: trigger
          required: true
          in: path
          description: 'Trigger unique identifier.'
          type: string
      summary: "Get a server trigger"
      tags:
        - projects
    put:
      operationId: service_trigger_replace
      responses:
        '200':
          description: 'ServerAction updated.'
          examples:
            application/json: {"id": "19938b2c-17f6-46ed-a506-f5b196853951","name": "serverStartPut","operation": "start","url": "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"}
          schema:
            $ref: '#/definitions/ServerAction'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerActionError'
        '404':
          description: 'Server action not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: trigger
          required: true
          in: path
          description: 'Trigger unique identifier.'
          type: string
        - name: server_action
          in: body
          schema:
            $ref: '#/definitions/ServerActionData'
      consumes:
        - application/json
      summary: "Replace a server trigger"
      tags:
        - projects
    patch:
      operationId: service_trigger_update
      responses:
        '200':
          description: 'Server action updated.'
          examples:
            application/json: {"id": "19938b2c-17f6-46ed-a506-f5b196853951","name": "serverStartPatch","operation": "start","url": "/v1/johndoe/service/ed81aac7-835d-4702-a58e-4eeda89d4a5a/trigger/19938b2c-17f6-46ed-a506-f5b196853951/call/"}

          schema:
            $ref: '#/definitions/ServerAction'
        '400':
          description: 'Invalid data supplied'
          schema:
            $ref: '#/definitions/ServerActionError'
        '404':
          description: 'Server action not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: trigger
          required: true
          in: path
          description: 'Trigger identifier expressed as UUID or name.'
          type: string
        - name: server_action
          in: body
          schema:
            $ref: '#/definitions/ServerActionData'
      consumes:
        - application/json
      summary: "Update a server trigger"
      tags:
        - projects
    delete:
      operationId: service_trigger_delete
      responses:
        '204':
          description: 'ServerAction deleted'
        '404':
          description: 'ServerAction not found'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: trigger
          required: true
          in: path
          description: 'Trigger identifier expressed as UUID or name.'
          type: string
      summary: "Delete a server trigger"
      tags:
        - projects
  '/v1/{namespace}/projects/{project}/servers/{server}/auth/':
    post:
      operationId: projects_servers_auth
      responses:
        '200':
          description: 'Api key verified'
        '401':
          description: 'Invalid api key.'
      parameters:
        - name: project
          required: true
          in: path
          description: 'Project unique identifier expressed as UUID or name.'
          type: string
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: server
          required: true
          in: path
          description: 'Server unique identifier expressed as UUID or name.'
          type: string
      summary: 'Server api key validation'
      tags:
        - projects
  '/v1/{namespace}/search/':
    get:
      operationId: search
      responses:
        '200':
          description: 'Search list.'
          schema:
            type: array
            items:
              $ref: '#/definitions/Search'
      parameters:
        - name: namespace
          required: true
          in: path
          description: 'User or team name.'
          type: string
        - name: q
          required: true
          in: query
          description: 'Search string.'
          type: string
        - name: type
          required: false
          in: query
          description: 'Limit results to specific types.'
          type: string
          enum:
            - users
            - projects
            - servers
        - name: limit
          required: false
          in: query
          description: 'Limit data when getting items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset data when getting items.'
          type: string
      summary: "Get a search results"
      tags:
        - search
  '/v1/servers/options/server-size/':
    get:
      operationId: servers_options_sizes_list
      responses:
        '200':
          description: 'Server size list.'
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/ServerSize'
      parameters:
        - name: limit
          required: false
          in: query
          description: 'Set limit when retrieving items.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when retrieving items.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Set order when retrieving items.'
          type: string
      summary: "Retrieve available server sizes"
      tags:
        - servers
    post:
      operationId: servers_options_server_size_create
      responses:
        '201':
          description: 'ServerSize created. This operation is available only to super users.'
          examples:
            application/json: {"id": "2f4a5830-169d-4111-b913-e68c7b94fdbe","name": "myResource","cpu": 1,"memory": 512,"active": true}
          schema:
            $ref: '#/definitions/ServerSize'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/ServerSizeError'
      parameters:
        - name: serversize_data
          in: body
          schema:
            $ref: '#/definitions/ServerSizeData'
      consumes:
        - application/json
      summary: "Create a new server size item"
      description: "Only super users with on-premises version have acceess to this endpoint."
      tags:
        - servers
  '/v1/servers/options/server-size/{size}/':
    get:
      operationId: servers_options_resources_read
      responses:
        '200':
          description: 'Environment resource retrieved.'
          examples:
            application/json: {"id": "2f4a5830-169d-4111-b913-e68c7b94fdbe","name": "myResource","cpu": 1,"memory": 512,"active": true}
          schema:
            $ref: '#/definitions/ServerSize'
        '404':
          description: 'Environment resource not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: size
          required: true
          in: path
          description: 'Server size unique identifier expressed as UUID or name.'
          type: string
      summary: "Get a server size by id"
      tags:
        - servers
    put:
      operationId: servers_options_server_size_replace
      responses:
        '200':
          description: 'Server size replaced. This operation is available only to super users.'
          examples:
            application/json: {"id": "b673c7ab-65ad-4d6e-859e-0483eea86ad6","name": "myResourceWithPut","cpu": 1,"memory": 512,"active": true}
          schema:
            $ref: '#/definitions/ServerSize'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerSizeError'
        '404':
          description: ServerSize not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: size
          required: true
          in: path
          description: 'Server size unique identifier expressed as UUID or name.'
          type: string
        - name: serversize_data
          in: body
          schema:
            $ref: '#/definitions/ServerSizeData'
      consumes:
        - application/json
      summary: "Replace a server size by id"
      description: "Only super users with on-premises version have acceess to this endpoint."
      tags:
        - servers
    patch:
      operationId: servers_options_server_size_update
      responses:
        '200':
          description: 'Server size updated. This operation is available only to super users.'
          examples:
            application/json: {"id": "b673c7ab-65ad-4d6e-859e-0483eea86ad6","name": "myServerSizeWithPatch","cpu": 1,"memory": 512,"active": true}
          schema:
            $ref: '#/definitions/ServerSize'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/ServerSizeError'
        '404':
          description: 'Server size not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: size
          required: true
          in: path
          description: 'Server size unique identifier expressed as UUID or name.'
          type: string
        - name: serversize_data
          in: body
          schema:
            $ref: '#/definitions/ServerSizeData'
      consumes:
        - application/json
      summary: "Update a server size by id"
      description: "Only super users with on-premises version have acceess to this endpoint."
      tags:
        - servers
    delete:
      operationId: servers_options_server_size_delete
      responses:
        '204':
          description: 'Server size deleted. This operation is available only to super users'
        '404':
          description: 'ServerSize not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: size
          required: true
          in: path
          description: 'Server size unique identifier expressed as UUID or name.'
          type: string
      summary: "Delete a server size by id"
      description: "Only super users with on-premises version have acceess to this endpoint."
      tags:
        - servers
  /v1/me:
    get:
      operationId: me
      responses:
        '200':
          description: 'User information retrieved.'
          examples:
            application/json: {"id":"66949654-1f75-4c6f-a5c5-e3572eae6527","username":"johndoe","email":"johndoe@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"I like tests","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}}
          schema:
            $ref: '#/definitions/User'
      summary: "A convenience endpoint that is equivalent to GET /v1/users/profiles/<my user id>/"
      tags:
        - users
  /v1/users/profiles/:
    get:
      operationId: users_list
      responses:
        '200':
          description: User list
          examples:
            application/json: [ {"id":"66949654-1f75-4c6f-a5c5-e3572eae6527","username":"johndoe","email":"johndoe@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"I like tests","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}}, {"id":"66949654-1f75-4c6f-a5c5-e3572eae6527","username":"janedoe","email":"janedoe@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"I like tests","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}} ]
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      parameters:
        - name: limit
          required: false
          in: query
          description: 'Limit user list.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting users.'
          type: string
        - name: username
          required: false
          in: query
          description: 'User username.'
          type: string
        - name: email
          required: false
          in: query
          description: 'User email.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting users.'
          type: string
      summary: "Get user list"
      tags:
        - users
    post:
      operationId: users_create
      responses:
        '201':
          description: User created
          examples:
            application/json: {"id":"66949654-1f75-4c6f-a5c5-e3572eae6527","username":"johndoe","email":"johndoe@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"I like tests","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}}
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/UserError'
      parameters:
        - name: user_data
          in: body
          schema:
            $ref: '#/definitions/UserData'
      consumes:
        - application/json
      summary: "Create new user"
      description: 'Only admin users can create new users. New users have active status by default.'
      tags:
        - users
  /v1/users/profiles/{user}/:
    get:
      operationId: users_read
      responses:
        '200':
          description: 'User retrieved.'
          examples:
            application/json: {"id":"66949654-1f75-4c6f-a5c5-e3572eae6527","username":"johndoe","email":"johndoe@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"I like tests","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}}
          schema:
            $ref: '#/definitions/User'
        '404':
          description: 'User not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: user
          required: true
          in: path
          description: 'Unique identifier expressed as UUID or username.'
          type: string
      summary: "Retrieve a user"
      tags:
        - users
    patch:
      operationId: users_update
      responses:
        '200':
          description: 'User updated.'
          examples:
            application/json: {"id":"66949654-1f75-4c6f-a5c5-e3572eae6527","username":"johndoe","email":"runB@email.com","first_name":"John","last_name":"Doe","profile":{"avatar_url":"http://example.com/","bio":"Data updated with patch","url":"http://about.me/myprofile","location":"Atlanta, GA","company":"3Blades","timezone":"America/New_York"}}
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/UserError'
        '404':
          description: 'User not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
        - name: user_data
          in: body
          schema:
            $ref: '#/definitions/UserData'
      consumes:
        - application/json
      summary: "Update a user"
      tags:
        - users
    delete:
      operationId: users_delete
      responses:
        '204':
          description: 'User deleted.'
        '404':
          description: User not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User identifier expressed as UUID or username.'
          type: string
      summary: "Delete a user"
      tags:
        - users
  '/v1/users/{user}/api-key/':
    get:
      operationId: users_api-key_list
      responses:
        '200':
          description: 'Api Key'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: "Retrieve account's API key"
      tags:
        - users
  '/v1/users/{user}/api-key/reset/':
    post:
      operationId: users_api-key_reset
      responses:
        '201':
          description: 'Reset Api Key'
        '400':
          description: 'Invalid data supplied'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: "Reset a user's API key"
      tags:
        - users
  '/v1/users/{user}/avatar/':
    post:
      operationId: user_avatar_set
      responses:
        '201':
          description: 'Added user avatar'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid data supplied'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      consumes:
        - multipart/form-data
      summary: "Add user avatar"
      tags:
        - users
    get:
      operationId: user_avatar_get
      responses:
        '200':
          description: 'User avatar'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUIDor username.'
          type: string
      summary: "Retrieve user's avatar"
      tags:
        - users
    patch:
      operationId: user_avatar_update
      responses:
        '200':
          description: 'Avatar updated.'
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 'Invalid data supplied.'
          schema:
            $ref: '#/definitions/UserError'
        '404':
          description: 'Avatar not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      consumes:
        - multipart/form-data
      summary: 'Update a project file'
      tags:
        - users
    delete:
      operationId: user_avatar_delete
      responses:
        '204':
          description: 'Avatar deleted'
        '404':
          description: 'Avatar not found'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: 'Delete avatar'
      tags:
        - users
  '/v1/users/{user}/emails/':
    get:
      operationId: users_emails_list
      responses:
        '200':
          description: Email list
          examples:
            application/json: []
          schema:
            type: array
            items:
              $ref: '#/definitions/Email'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier as expressed as UUID or username.'
          type: string
        - name: limit
          required: false
          in: query
          description: 'Limite when getting email list.'
          type: string
        - name: offset
          required: false
          in: query
          description: 'Offset when getting email list.'
          type: string
        - name: ordering
          required: false
          in: query
          description: 'Ordering when getting email list.'
          type: string
      summary: "Retrieve account email addresses"
      tags:
        - users
    post:
      operationId: users_emails_create
      responses:
        '201':
          description: Email created
          examples:
            application/json: {"id": "383e0d16-2052-4196-95b8-d9d73ed043a9","address": "post@email.com","public": true,"unsubscribed": false}

          schema:
            $ref: '#/definitions/Email'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/EmailError'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
        - name: email_data
          in: body
          schema:
            $ref: '#/definitions/EmailData'
      consumes:
        - application/json
      summary: "Create an email address"
      tags:
        - users
  '/v1/users/{user}/emails/{email_id}/':
    get:
      operationId: users_emails_read
      responses:
        '200':
          description: Email retrieved
          examples:
            application/json: {"id": "383e0d16-2052-4196-95b8-d9d73ed043a9","address": "post@email.com","public": true,"unsubscribed": false}
          schema:
            $ref: '#/definitions/Email'
        '404':
          description: Email not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: email_id
          required: true
          in: path
          description: 'Email unique identifier expressed as UUID.'
          type: string
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: "Retrieve a user's email addresses"
      tags:
        - users
    put:
      operationId: users_emails_replace
      responses:
        '200':
          description: Email updated
          examples:
            application/json: {"id":"383e0d16-2052-4196-95b8-d9d73ed043a9","address":"put@email.com","public":false,"unsubscribed":true}
          schema:
            $ref: '#/definitions/Email'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/EmailError'
      parameters:
        - name: email_id
          required: true
          in: path
          description: 'Email unique identifier expressed as UUID.'
          type: string
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
        - name: email_data
          in: body
          schema:
            $ref: '#/definitions/EmailData'
      consumes:
        - application/json
      summary: "Replace an email address"
      tags:
        - users
    patch:
      operationId: users_emails_update
      responses:
        '200':
          description: Email updated
          examples:
            application/json: {"id":"383e0d16-2052-4196-95b8-d9d73ed043a9","address":"patch@email.com","public":false,"unsubscribed":false}
          schema:
            $ref: '#/definitions/Email'
        '400':
          description: Invalid data supplied
          schema:
            $ref: '#/definitions/EmailError'
        '404':
          description: Email not found
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: email_id
          required: true
          in: path
          description: 'Email unique identifier expressed as UUID.'
          type: string
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
        - name: email_data
          in: body
          schema:
            $ref: '#/definitions/EmailData'
      consumes:
        - application/json
      summary: "Update an email address"
      tags:
        - users
    delete:
      operationId: users_emails_delete
      responses:
        '204':
          description: 'Email deleted.'
        '404':
          description: 'Email not found.'
          schema:
            $ref: '#/definitions/NotFound'
      parameters:
        - name: email_id
          required: true
          in: path
          description: 'Email unique identifier expressed as UUID.'
          type: string
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: "Delete an email address"
      tags:
        - users
  '/v1/users/{user}/ssh-key/':
    get:
      operationId: users_ssh-key_list
      responses:
        '200':
          description: 'SSH Key.'
          examples:
            application/json: {"key":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqadyIPIEOF4M7SDoI+MHnAj6q2CY2j62Eg0sNbBbjnuekxnhSWVVKPte+NVtK4MWIyw3wnCCzTjwe0p2pQpMqxjqnCAkBPGhOjrRWTvV54hHTihBxiAEmXqbaBg5e6SaXcqP1OajWYzDqhts4ISer0uymzi0hW65At5i5k87Xu9HSM/Q0ySVJGm0rMuDCIoaTIeQdTkAI9ww/cmOM7uvIDO0OJv2xai9xLB9APVq8zCtqWdivMaqo2waPDT/I9bwtSZxRsnRMakGmj3CWvciHv13UsGlbB7nTeDKX0eyQl/5SADLO0bU+hY/8BpRjjtdq57Pqn/Xyw22YarDkG74gjLG5GBFZkBxcpENoUtCUyE2bhBT4x9yXlTeycMBTopGtzTfIHrJtIgNCFMhg9LbK4IKP/1pLj8SrVaQ9/k/QkxmDFoqfwdGd3AWOghMCAbAB7KaDKrj/XBf/KgTd8ZozjvkTzu2YRf4o3DebxRJipPQumrH3iXX5Kfe9lBWkR7Smewwp2XZrdgBeXN/54hd+Ic3upi528IGzEzu3/xtLT/e7kLi1QH7CVVN1sskZkIRr7aukw4YiVWgVOAlqKzJEoE/BPZSOA0NlgG0h37ZmyhdY1VqtoD+Vnj7Qh272PlTB14ndEVTqGuZhsCSxIhXev+METZ6XezK5n1VQeHGveQ=="}
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: "Retrieve an SSH key"
      tags:
        - users
  '/v1/users/{user}/ssh-key/reset/':
    post:
      operationId: users_ssh-key_reset
      responses:
        '201':
          description: 'Reset SSH Key successfully.'
          examples:
            application/json: {"key":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDhMvg2+n2yNu0H2Hg8uiXfQtAid0WGRigNckb5J0T9GFINmqkYalI/AsWZbl4UfNMviD73h9xowUx+d7s2vB3E8bFxB9OWM22eLSp8fnbuhdI5mKBflq0jr6ms1cR/SD3YsbZ9sX6BqycQrjjYYl7WLM9rgec6b+EYyr/6nbDH/wql06TrNl6LUNkqI+YIqjRvqMeNEY9ux3sB+f46FRKO683u/cRCcp1eWAYf1ByYupIGREbQFLxhYv/NcKD8uIo7DRAuutwHKGOgnAl4WGUVsT5dplhaDYKlDTf2iMiJ+QDT25QABdrkHcIsu5D21AIdH3FI5UQnnu4unyEA77IDLp2EwKRr9k1XQc1o3zQ61+9Gm7Rt80WWgRsnhmshvAIDNcBv1+82kmA9jyeUf3M7KoRJLk6nIbZ1NwoVCX0VF3lRIB0Hvm/dL7Rpk8m/hE0SIIWIGaXbOT4ANFj+TxcF1Mfk7C3/T5/AYLHcq9ocYFKe4Q3Jv7tuHm600edpUfORdpCpjytcKStza07dRDa+OU577r6a1zHMrEMh8oEUtVO5pC1+EaRijTVaOR62DoarHdxJ23Ctk44o0JZfzj9VoVaAwVAhL1aT3pAQxQlWiTKpmYaHUYUp9SRJhyeFr/gpeIGTydKdawkh9Mz8KMlnu1GUolDDuOvSnvidzWaEaw=="}
        '400':
          description: 'Invalid data supplied.'
      parameters:
        - name: user
          required: true
          in: path
          description: 'User unique identifier expressed as UUID or username.'
          type: string
      summary: "Recreate an SSH key"
      tags:
        - users
definitions:
  Action:
    type: object
    properties:
      id:
        type: string
        description: 'Action unique identifier, expressed as UUID.'
      resource_uri:
        type: string
        description: 'Resource URI.'
      payload:
        type: object
        description: 'Object action payload.'
      action:
        type: string
        description: 'Action name.'
      method:
        type: string
        description: 'Action method.'
      user:
        type: string
        description: 'User that action is assigned to.'
      user_agent:
        type: string
        description: 'User agent that action is related to.'
      start_date:
        type: string
        description: 'Action date and time start.'
      end_date:
        type: string
        description: 'Action needs to end before a certain date and time.'
      state:
        type: string
        description: 'Action state.'
      ip:
        type: string
        description: 'IP address that action is related to.'
      object:
        type: string
        description: 'Action object.'
      is_user_action:
        type: boolean
        description: 'Is the action related to a user, or not.'
      can_be_cancelled:
        type: boolean
        description: 'Can action be cancelled, or not.'
      can_be_retried:
        type: boolean
        description: 'May action be retried, or not.'
      path:
        type: string
        description: 'Action path.'
      action_name:
        type: string
        description: 'Action name.'
    required:
      - action
      - method
      - user_agent
      - state
  AuthToken:
    type: object
    properties:
      token:
        type: string
        description: 'Unique JWT authorization token.'
  AuthTokenData:
    type: object
    properties:
      username:
        description: "User's username."
        type: string
      password:
        description: "User's password."
        type: string
    required:
      - username
      - password
  AuthTokenError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      username:
        type: array
        description: 'Username field errors.'
        items:
          type: string
      password:
        type: array
        description: 'Password field errors.'
        items:
          type: string
      token:
        type: array
        description: 'Token field errors.'
        items:
          type: string
  Card:
    type: object
    properties:
      name:
        type: string
        description: 'Card name.'
      address_line1:
        type: string
        description: 'Address line 1.'
      address_line2:
        type: string
        description: 'Address line 2.'
      address_city:
        type: string
        description: 'Address city.'
      address_state:
        type: string
        description: 'Address state.'
      address_zip:
        type: string
        description: 'Address zip code.'
      address_country:
        type: string
        description: 'Address country.'
      exp_month:
        type: integer
        description: 'Card expiration month.'
      exp_year:
        type: integer
        description: 'Card expiration year.'
      token:
        type: string
        description: 'Card unique token.'
      id:
        type: string
        description: 'Card unique identifier, expressed as UUID.'
      customer:
        type: string
        description: 'Card customer.'
      address_line1_check:
        type: string
        description: 'Address line 1 check, when processing card.'
      address_zip_check:
        type: string
        description: 'Address check, when processing card.'
      brand:
        type: string
        description: 'Credit or debit card brand.'
      cvc_check:
        type: string
        description: 'Security code check.'
      last4:
        type: string
        description: 'Last four digits of credit or debit card.'
      fingerprint:
        type: string
        description: 'Card fingerprint.'
      funding:
        type: string
        description: 'Funding.'
      stripe_id:
        type: string
        description: 'Unique stripe identifier.'
      created:
        type: string
        description: 'Card date and time creation.'
  CardDataPost:
    type: object
    properties:
      name:
        type: string
        description: 'Card name.'
      address_line1:
        type: string
        description: 'Address line 1.'
      address_line2:
        type: string
        description: 'Address line 2.'
      address_city:
        type: string
        description: 'Address city.'
      address_state:
        type: string
        description: 'Address state.'
      address_zip:
        type: string
        description: 'Address zip code.'
      address_country:
        type: string
        description: 'Address country.'
      exp_month:
        type: integer
        description: 'Card expiration month.'
      exp_year:
        type: integer
        description: 'Card expiration year.'
      token:
        type: string
        description: 'Card unique token.'
  CardDataPutandPatch:
    type: object
    properties:
      name:
        type: string
        description: 'Card name.'
      address_line1:
        type: string
        description: 'Address line 1.'
      address_line2:
        type: string
        description: 'Address line 2.'
      address_city:
        type: string
        description: 'Address city.'
      address_state:
        type: string
        description: 'Address state.'
      address_zip:
        type: string
        description: 'Address zip code.'
      address_country:
        type: string
        description: 'Address country.'
      exp_month:
        type: integer
        description: 'Card expiration month.'
      exp_year:
        type: integer
        description: 'Card expiration year.'
  CardError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: Errors not connected to any field
        items:
          type: string
      name:
        type: array
        description: name field errors
        items:
          type: string
      address_line1:
        type: array
        description: address_line1 field errors
        items:
          type: string
      address_line2:
        type: array
        description: address_line2 field errors
        items:
          type: string
      address_city:
        type: array
        description: address_city field errors
        items:
          type: string
      address_state:
        type: array
        description: address_state field errors
        items:
          type: string
      address_zip:
        type: array
        description: address_zip field errors
        items:
          type: string
      address_country:
        type: array
        description: address_country field errors
        items:
          type: string
      exp_month:
        type: array
        description: exp_month field errors
        items:
          type: string
      exp_year:
        type: array
        description: exp_year field errors
        items:
          type: string
      token:
        type: array
        description: token field errors
        items:
          type: string
      id:
        type: array
        description: id field errors
        items:
          type: string
      customer:
        type: array
        description: customer field errors
        items:
          type: string
      address_line1_check:
        type: array
        description: address_line1_check field errors
        items:
          type: string
      address_zip_check:
        type: array
        description: address_zip_check field errors
        items:
          type: string
      brand:
        type: array
        description: brand field errors
        items:
          type: string
      cvc_check:
        type: array
        description: cvc_check field errors
        items:
          type: string
      last4:
        type: array
        description: last4 field errors
        items:
          type: string
      fingerprint:
        type: array
        description: fingerprint field errors
        items:
          type: string
      funding:
        type: array
        description: funding field errors
        items:
          type: string
      stripe_id:
        type: array
        description: stripe_id field errors
        items:
          type: string
      created:
        type: array
        description: created field errors
        items:
          type: string
  CardUpdateError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field'
        items:
          type: string
      name:
        type: array
        description: 'name field errors'
        items:
          type: string
      address_line1:
        type: array
        description: 'address_line1 field errors'
        items:
          type: string
      address_line2:
        type: array
        description: 'address_line2 field errors'
        items:
          type: string
      address_city:
        type: array
        description: 'address_city field errors'
        items:
          type: string
      address_state:
        type: array
        description: address_state field errors
        items:
          type: string
      address_zip:
        type: array
        description: 'address_zip field errors'
        items:
          type: string
      address_country:
        type: array
        description: 'address_country field errors'
        items:
          type: string
      exp_month:
        type: array
        description: 'exp_month field errors'
        items:
          type: string
      exp_year:
        type: array
        description: 'exp_year field errors'
        items:
          type: string
      token:
        type: array
        description: 'token field errors'
        items:
          type: string
      id:
        type: array
        description: 'id field errors'
        items:
          type: string
      customer:
        type: array
        description: 'customer field errors'
        items:
          type: string
      address_line1_check:
        type: array
        description: 'address_line1_check field errors'
        items:
          type: string
      address_zip_check:
        type: array
        description: 'address_zip_check field errors'
        items:
          type: string
      brand:
        type: array
        description: 'brand field errors'
        items:
          type: string
      cvc_check:
        type: array
        description: 'cvc_check field errors'
        items:
          type: string
      last4:
        type: array
        description: 'last4 field errors'
        items:
          type: string
      fingerprint:
        type: array
        description: 'fingerprint field errors'
        items:
          type: string
      funding:
        type: array
        description: 'funding field errors'
        items:
          type: string
      stripe_id:
        type: array
        description: 'stripe_id field errors'
        items:
          type: string
      created:
        type: array
        description: 'created field errors'
        items:
          type: string
  Collaborator:
    type: object
    properties:
      id:
        type: string
        description: 'Collaborator unique identifier in UUID format.'
      owner:
        type: boolean
        description: |
          Boolean that states whether collaborator is project owner, or not.
      joined:
        type: string
        description: 'Date time of when collaborator joined.'
      username:
        type: string
        description: |
          Collaborator's user name. This must be a valid user name within the
          system.
      email:
        type: string
        description: "Collaborator's valid email address."
      first_name:
        type: string
        description: "Collaborator's first name."
      last_name:
        type: string
        description: "Collaborator's last name."
      permissions:
        type: array
        description: |
          Collaborator permissions. Project creators are assigned owner
          priviledges by default. Permissions are write and read.
        items:
          type: string
          enum:
            - write_project
            - read_project
  CollaboratorData:
    type: object
    properties:
      owner:
        description: 'Project owner. Defaults to false.'
        type: boolean
      member:
        description: 'Project member username.'
        type: string
      permissions:
        description: 'Permissions assigned to collaborator.'
        type: string
        enum:
          - read_project
          - write_project
    required:
    - member
    - permissions
  CollaboratorError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'Id field errors this'
        items:
          type: string
      owner:
        type: array
        description: 'Owner field errors.'
        items:
          type: string
      joined:
        type: array
        description: 'Joined field errors.'
        items:
          type: string
      username:
        type: array
        description: 'Username field errors.'
        items:
          type: string
      email:
        type: array
        description: 'Email field errors.'
        items:
          type: string
      first_name:
        type: array
        description: 'First name field errors.'
        items:
          type: string
      last_name:
        type: array
        description: 'Last name field errors.'
        items:
          type: string
      member:
        type: array
        description: 'Member field errors.'
        items:
          type: string
      permissions:
        type: array
        description: 'Permissions field errors.'
        items:
          type: string
    required:
    - member
    - permissions
  Customer:
    type: object
    properties:
      id:
        type: string
        description: 'Customer unique identifier expressed as UUID.'
      stripe_id:
        type: string
        description: 'Stripe identifier.'
      created:
        type: string
        description: 'Date and time for customer creation.'
      metadata:
        type: object
        description: 'Optional customer meta data object.'
      livemode:
        type: boolean
        description: 'Customer live mode.'
      account_balance:
        type: integer
        description: 'Customer account balance.'
      currency:
        type: string
        description: 'Currency used by customer.'
      last_invoice_sync:
        type: string
        description: 'Date and time for last invoice sync.'
      user:
        type: string
        description: 'Customer primary user.'
      default_source:
        type: string
        description: 'Customer default source.'
    required:
      - user
  CustomerData:
    type: object
    properties:
      metadata:
        description: 'Customer meta data.'
        type: object
      account_balance:
        description: 'Account balance.'
        type: integer
      currency:
        description: 'Customer preferred currency.'
        type: string
      last_invoice_sync:
        description: 'List date and time invoice was synced.'
        type: string
      user:
        description: 'User corresponding to customer.'
        type: string
      default_source:
        description: 'Default source.'
        type: string
    required:
    - user
  CustomerError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field'
        items:
          type: string
      id:
        type: array
        description: 'id field errors'
        items:
          type: string
      stripe_id:
        type: array
        description: 'stripe_id field errors'
        items:
          type: string
      created:
        type: array
        description: 'created field errors'
        items:
          type: string
      metadata:
        type: array
        description: 'metadata field errors'
        items:
          type: string
      livemode:
        type: array
        description: 'livemode field errors'
        items:
          type: string
      account_balance:
        type: array
        description: 'account_balance field errors'
        items:
          type: string
      currency:
        type: array
        description: 'currency field errors'
        items:
          type: string
      last_invoice_sync:
        type: array
        description: 'last_invoice_sync field errors'
        items:
          type: string
      user:
        type: array
        description: 'user field errors'
        items:
          type: string
      default_source:
        type: array
        description: 'default_source field errors'
        items:
          type: string
  DockerHost:
    type: object
    properties:
      id:
        type: string
        description: 'Unique identifier for docker host as UUID.'
      name:
        type: string
        description: 'Docker host name.'
      ip:
        type: string
        description: 'Docker host IPv4 address'
      port:
        type: integer
        description: 'Docker host port.'
      status:
        type: string
        description: 'Docker host status.'
    required:
      - name
      - ip
  DockerHostData:
    type: object
    properties:
      name:
        description: 'DockerHost name.'
        type: string
      ip:
        description: 'DockerHost IPv4 address.'
        type: string
      port:
        description: 'DockerHost port.'
        type: integer
    required:
      - name
      - ip
  DockerHostError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'Id field errors.'
        items:
          type: string
      name:
        type: array
        description: 'Name field errors.'
        items:
          type: string
      ip:
        type: array
        description: 'Ip field errors'
        items:
          type: string
      port:
        type: array
        description: 'Port field errors.'
        items:
          type: string
      status:
        type: array
        description: 'Status field errors.'
        items:
          type: string
  Email:
    type: object
    properties:
      address:
        type: string
        description: 'Email address.'
      public:
        type: boolean
        description: 'Boolean to determine if email is public or private.'
      unsubscribed:
        type: boolean
        description: 'Boolean to determine whether user is suscribed or unsubscribed to out going email campaigns.'
    required:
      - address
  EmailData:
    type: object
    properties:
      address:
        description: 'Email address.'
        type: string
      public:
        description: 'Public or private email address.'
        type: boolean
      unsubscribed:
        description: 'Unsubscribed or suscribed.'
        type: boolean
    required:
      - address
  EmailError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      address:
        type: array
        description: 'Address field errors.'
        items:
          type: string
      public:
        type: array
        description: 'Public field errors.'
        items:
          type: string
      unsubscribed:
        type: array
        description: 'Unsubscribed field errors.'
        items:
          type: string
  Invoice:
    type: object
    properties:
      id:
        type: string
        description: 'Invoice unique identifier expressed as UUID.'
      stripe_id:
        type: string
        description: 'Stripe account identifier.'
      created:
        type: string
        description: 'Date and time when invoice was created.'
      metadata:
        type: object
        description: 'Optional metadata object of invoice.'
      livemode:
        type: boolean
        description: 'Boolean that determines whether invoice is live, or not.'
      amount_due:
        type: integer
        description: 'Amount due set in invoice.'
      application_fee:
        type: integer
        description: 'Application fee set in invoice.'
      attempt_count:
        type: integer
        description: 'Number of attempts to deliver invoice.'
      attempted:
        type: boolean
        description: 'Boolean to determine whether delivery attempt executed, or not.'
      closed:
        type: boolean
        description: 'Invoice closed, or pending.'
      currency:
        type: string
        description: 'Currency used in invoice.'
      invoice_date:
        type: string
        description: 'Invoice issue date.'
      description:
        type: string
        description: 'Invoice description.'
      next_payment_attempt:
        type: string
        description: 'Next payment attempt.'
      paid:
        type: boolean
        description: 'Determines whether invoice has been paid, or not.'
      period_start:
        type: string
        description: 'Invoice start period.'
      period_end:
        type: string
        description: 'Invoice end period.'
      reciept_number:
        type: string
        description: 'Invoice receipt number.'
      starting_balance:
        type: integer
        description: 'Invoice starting balance.'
      statement_descriptor:
        type: string
        description: 'Invoice statement descriptor.'
      subtotal:
        type: integer
        description: 'Invoice sub total.'
      tax:
        type: integer
        description: 'Tax, if applicable.'
      total:
        type: integer
        description: 'Invoice total.'
      customer:
        type: string
        description: 'Customer name.'
      subscription:
        type: string
        description: 'Suscription name.'
    required:
      - stripe_id
      - created
      - amount_due
      - currency
      - invoice_date
      - period_start
      - period_end
      - reciept_number
      - starting_balance
      - subtotal
      - total
      - customer
  InvoiceItem:
    type: object
    properties:
      id:
        type: string
        description: 'InvoiceItem unique identifier expressed as UUID.'
      stripe_id:
        type: string
        description: 'Stripe account identifier.'
      created:
        type: string
        description: 'Date and time when invoice was created.'
      metadata:
        type: object
        description: 'Optional metadata object of invoice.'
      livemode:
        type: boolean
        description: 'Boolean that determines whether invoice is live, or not.'
      invoice:
        type: string
        description: 'Invoice unique identifier expressed as UUID.'
      amount:
        type: integer
        description: 'Amount the the invoice item will be billed for.'
      currency:
        type: string
        description: 'Currency used in invoice.'
      invoice_date:
        type: string
        description: 'Date the item was added to the invoice.'
      proration:
        type: boolean
        description: 'Whether or not the items cost will be prorated for the billing period.'
      quantity:
        type: integer
        description: 'Number of units for this item.'
      description:
        type: string
        description: 'Item description.'
    required:
      - stripe_id
      - created
      - amount
      - currency
      - invoice
      - invoice_date
      - quantity
  JWT:
    type: object
    properties:
      token:
        type: string
        description: 'Unique JSON Web Token (JWT).'
  JWTData:
    type: object
    properties:
      username:
        description: 'User name.'
        type: string
      password:
        description: 'User password.'
        type: string
    required:
      - username
      - password
  JWTError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: Errors not connected to any field
        items:
          type: string
      username:
        type: array
        description: username field errors
        items:
          type: string
      password:
        type: array
        description: password field errors
        items:
          type: string
      token:
        type: array
        description: token field errors
        items:
          type: string
  NotFound:
    type: object
    properties:
      detail:
        type: string
        description: 'Requested item not found.'
  Plan:
    type: object
    properties:
      id:
        type: string
        description: 'Plan unique identifier as UUID.'
      stripe_id:
        type: string
        description: 'Stripe identifier to identify entity charging for plans.'
      created:
        type: string
        description: 'Date and time when plan was created.'
      metadata:
        type: object
        description: 'Optional meta data object.'
      livemode:
        type: boolean
        description: 'Boolean to determine whether plan is live, or not.'
      amount:
        type: integer
        description: 'Amount (cost/price) of plan.'
      currency:
        type: string
        description: 'Currency used to specify amount.'
      interval:
        type: string
        description: 'Interval for plan, such as montly or yearly.'
      interval_count:
        type: integer
        description: ''
      name:
        type: string
        description: 'Plan name.'
      statement_descriptor:
        type: string
        description: 'Statement that describes plan to users.'
      trial_period_days:
        type: integer
        description: 'Number of days for plan trial, used for try and buy campaigns.'
    required:
      - amount
      - interval
      - interval_count
      - name
  PlanData:
    type: object
    properties:
      metadata:
        description: 'Plan meta data.'
        type: object
      livemode:
        description: 'Is plan live, or not.'
        type: boolean
      amount:
        description: 'Plan amount in currency.'
        type: integer
      currency:
        description: 'Currency for plan.'
        type: string
      interval:
        description: 'Plan interval.'
        type: array
        items:
          type: string
          enum: [day, week, month, year]
      interval_count:
        description: 'Number of intervals.'
        type: integer
      name:
        description: 'Plan name.'
        type: string
      statement_descriptor:
        description: 'Plan description.'
        type: string
      trial_period_days:
        description: 'Trial days for try and buy campaigns.'
        type: integer
    required:
      - amount
      - interval
      - interval_count
      - name
  PlanError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: Errors not connected to any field
        items:
          type: string
      id:
        type: array
        description: id field errors
        items:
          type: string
      stripe_id:
        type: array
        description: stripe_id field errors
        items:
          type: string
      created:
        type: array
        description: created field errors
        items:
          type: string
      metadata:
        type: array
        description: metadata field errors
        items:
          type: string
      livemode:
        type: array
        description: livemode field errors
        items:
          type: string
      amount:
        type: array
        description: amount field errors
        items:
          type: string
      currency:
        type: array
        description: currency field errors
        items:
          type: string
      interval:
        type: array
        description: interval field errors
        items:
          type: string
      interval_count:
        type: array
        description: interval_count field errors
        items:
          type: string
      name:
        type: array
        description: name field errors
        items:
          type: string
      statement_descriptor:
        type: array
        description: statement_descriptor field errors
        items:
          type: string
      trial_period_days:
        type: array
        description: "trial period days field errors"
        items:
          type: string
  Project:
    type: object
    properties:
      id:
        type: string
        description: 'Unique identifier for project as UUID.'
      name:
        type: string
        description: 'Project name.'
      description:
        type: string
        description: 'Project description.'
      private:
        type: boolean
        description: 'Value that states whether project is private or public.'
      last_updated:
        type: string
        description: 'Date and time when project was last updated.'
      owner:
        type: string
        description: 'Username of project owner.'
      collaborators:
        type: array
        description: 'Array of project collaborators.'
        items:
          type: string
    required:
      - name
  ProjectData:
    type: object
    properties:
      name:
        description: 'Project name.'
        type: string
      description:
        description: 'Project description.'
        type: string
      private:
        description: 'Private project true, otherwise public.'
        type: boolean
    required:
      - name
  ProjectError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'Id field errors.'
        items:
          type: string
      name:
        type: array
        description: 'Name field errors.'
        items:
          type: string
      description:
        type: array
        description: 'Description field errors.'
        items:
          type: string
      private:
        type: array
        description: 'Private field errors.'
        items:
          type: string
      last_updated:
        type: array
        description: 'Last_updated field errors.'
        items:
          type: string
      owner:
        type: array
        description: 'Owner field errors.'
        items:
          type: string
      collaborators:
        type: array
        description: 'Collaborators field errors.'
        items:
          type: string
  ProjectFile:
    type: object
    properties:
      id:
        type: string
        description: 'File unique identifier in UUID format.'
      project:
        type: string
        description: 'Project name where file is located.'
      content:
        type: string
        description: 'Data sent as string, in base64 format.'
      name:
        type: string
        description: 'File name and extension.'
      path:
        type: string
        description: 'File path. Defaults to root (/).'
    required:
      - project
  ProjectFileError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: Errors not connected to any field
        items:
          type: string
      id:
        type: array
        description: id field errors
        items:
          type: string
      project:
        type: array
        description: project field errors
        items:
          type: string
      file:
        type: array
        description: file field errors
        items:
          type: string
      content:
        type: array
        description: base64_data field errors
        items:
          type: string
      name:
        type: array
        description: name field errors
        items:
          type: string
      path:
        type: array
        description: path field errors
        items:
          type: string
  RefreshJSONWebToken:
    type: object
    properties:
      token:
        type: string
        description: 'Refresh JWT token.'
    required:
      - token
  RefreshJSONWebTokenData:
    type: object
    properties:
      token:
        description: 'Refreshed token.'
        type: string
    required:
      - token
  RefreshJSONWebTokenError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      token:
        type: array
        description: 'Token field errors.'
        items:
          type: string
  Search:
    type: object
    properties: {}
  Server:
    type: object
    properties:
      id:
        type: string
        description: 'Server unique identifier in UUID format.'
      name:
        type: string
        description: 'Server name.'
      created_at:
        type: string
        description: 'Date and time when server was created.'
      image_name:
        type: string
        description: |
          Server image source, such as 3blades/tensorflow-notebook.
      server_size:
        type: string
        description: 'Server size unique identifier.'
      startup_script:
        type: string
        description: 'Optional startup script to use when launching server.'
      config:
        type: object
        description: 'Server configuration option. Values are jupyter, restful and cron.'
      status:
        type: string
        enum:
          - Stopped
          - Running
          - Error
        description: 'Server status, such as Running or Error.'
      connected:
        type: array
        description: 'Array that represents what other servers the server is connected to.'
        items:
          type: string
      host:
        type: string
        description: |
          Value that represents user defined host, otherwise known as BYON (Bring Your Own Node).
      endpoint:
        type: string
        description: 'Server endpoint path.'
      logs_url:
        type: string
        description: |
          A WebSocket URL for streaming stdout and stderr logs from the server.
      status_url:
        type: string
        description: |
          A WebSocket URL for listening to server status changes.
    required:
      - name
  ServerData:
    type: object
    properties:
      name:
        description: 'Server name.'
        type: string
      image_name:
        description: 'Image name.'
        type: string
      server_size:
        description: 'Server size unique identifier.'
        type: string
      startup_script:
        description: 'Startup script to run when launching server.'
        type: string
      config:
        type: object
        description: 'Server configuration option. Values are jupyter, restful and cron.'
        $ref: '#/definitions/ServerConfig'
      connected:
        description: 'Array of other servers the server is connected to.'
        type: array
        items:
          type: string
      host:
        description: 'External host IPv4 address or hostname.'
        type: string
    required:
      - name
  ServerError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'id field errors.'
        items:
          type: string
      name:
        type: array
        description: 'name field errors.'
        items:
          type: string
      created_at:
        type: array
        description: 'created_at field errors.'
        items:
          type: string
      image_name:
        type: array
        description: 'image_name field errors.'
        items:
          type: string
      server_size:
        type: array
        description: 'server_size field errors.'
        items:
          type: string
      startup_script:
        type: array
        description: 'startup_script field errors.'
        items:
          type: string
      config:
        type: array
        description: 'config field errors.'
        items:
          type: string
      status:
        type: array
        description: 'status field errors.'
        items:
          type: string
      connected:
        type: array
        description: 'connected field errors.'
        items:
          type: string
      host:
        type: array
        description: 'host field errors.'
        items:
          type: string
      endpoint:
        type: array
        description: 'endpoint field errors.'
        items:
          type: string
      logs_url:
        type: array
        description: 'logs_url field errors.'
        items:
          type: string
      status_url:
        type: array
        description: 'status_url field errors.'
        items:
          type: string
  ServerAction:
    type: object
    properties:
      id:
        type: string
        description: 'Server trigger unique identifier.'
      name:
        type: string
        description: 'Name for server action.'
      operation:
        description: |
            Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. If the action results in Error, status will change to Error.
        type: string
        enum:
          - start
          - stop
          - terminate
      webhook:
        $ref: '#/definitions/Webhook'
  ServerActionData:
    type: object
    properties:
      name:
        type: string
        description: 'Name of server action.'
      operation:
        description: |
          Manage server state. Starting a server changes state from Pending to Running. Terminating a server changes state from Running to Terminated. Stopping a server changes state from Running to Stopped. If the action results in Error, status will change to Error.
        type: string
        enum:
          - start
          - stop
          - terminate
      webhook:
        $ref: '#/definitions/Webhook'
  ServerActionError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'Id field errors.'
        items:
          type: string
      name:
        type: array
        description: 'Name field errors.'
        items:
          type: string
      operation:
        type: array
        description: 'Operation field errors.'
        items:
          type: string
  ServerRunStatistics:
    type: object
    properties:
      id:
        type: string
        description: 'Server run statistics object unique identifier in UUID format.'
      start:
        type: string
        description: 'Date and time that represents when server started.'
      stop:
        type: string
        description: 'Date and time that represents when server stopped.'
      exit_code:
        type: integer
        description: 'Exit code, such as Exit 0 or Exit 1.'
      size:
        type: integer
        description: 'Size of server.'
      stacktrace:
        type: string
        description: 'Stacktrace, if there was one.'
  ServerRunStatisticsData:
    type: object
    properties:
      start:
        description: 'Server start.'
        type: string
      stop:
        description: 'Server stop.'
        type: string
      exit_code:
        description: 'Server exit code.'
        type: integer
      size:
        description: 'Server size.'
        type: integer
      stacktrace:
        description: 'Server stacktrace.'
        type: string
  ServerRunStatisticsError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'id field errors.'
        items:
          type: string
      start:
        type: array
        description: 'start field errors.'
        items:
          type: string
      stop:
        type: array
        description: 'stop field errors.'
        items:
          type: string
      exit_code:
        type: array
        description: 'exit_code field errors.'
        items:
          type: string
      size:
        type: array
        description: 'size field errors.'
        items:
          type: string
      stacktrace:
        type: array
        description: 'stacktrace field errors.'
        items:
          type: string
  ServerSize:
    type: object
    properties:
      id:
        type: string
        description: 'Server size unique identifier.'
      name:
        type: string
        description: 'Server size name.'
      cpu:
        type: integer
        description: |
          CPU availability, equivalent to --cpus=<value>. For example if a host has
          2 CPU's, then a value of 1.5 would be limit the container to using all of the
          first CPU and half of the second CPU.
      memory:
        type: integer
        description: 'Memory restriction for container.'
      active:
        type: boolean
        description: 'States whether the Server size is active, or not.'
    required:
      - name
      - cpu
      - memory
  ServerSizeData:
    type: object
    properties:
      name:
        description: 'Server size name.'
        type: string
      cpu:
        description: 'CPU set for server size.'
        type: integer
      memory:
        description: 'Memory set for server size.'
        type: integer
      active:
        description: 'Active or not active.'
        type: boolean
    required:
      - name
      - cpu
      - memory
      - active
  ServerSizeError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'Id field errors.'
        items:
          type: string
      name:
        type: array
        description: 'Name field errors.'
        items:
          type: string
      cpu:
        type: array
        description: 'CPU field errors.'
        items:
          type: string
      memory:
        type: array
        description: 'Memory field errors.'
        items:
          type: string
      active:
        type: array
        description: 'Active field errors.'
        items:
          type: string
  ServerStatistics:
    type: object
    properties:
      id:
        type: string
        description: 'Server statistics unique identifier in UUID format.'
      start:
        type: string
        description: 'Start statistics, such as start time and date.'
      stop:
        type: string
        description: 'Stop statistics, such as stop time and date.'
      size:
        type: integer
        description: 'Size of statistics.'
  ServerStatisticsData:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'id field errors.'
        items:
          type: string
      start:
        type: array
        description: 'start field errors.'
        items:
          type: string
      stop:
        type: array
        description: 'stop field errors.'
        items:
          type: string
      size:
        type: array
        description: 'size field errors.'
        items:
          type: string
  ServerStatisticsError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'Id field errors.'
        items:
          type: string
      start:
        type: array
        description: 'Start field errors.'
        items:
          type: string
      stop:
        type: array
        description: 'Stop field errors.'
        items:
          type: string
      size:
        type: array
        description: 'Size field errors.'
        items:
          type: string
  ServerConfig:
    type: object
    properties:
      type:
        type: string
        description: Server type.
        enum:
          - jupyter
          - restful
          - cron
      script:
        type: string
        description: Server script file.
      function:
        type: string
        description: Server function.
      command:
        type: string
        description: Command to run
  SshTunnel:
    type: object
    properties:
      id:
        type: string
        description: 'SSH tunnel unique identifier in UUID format.'
      name:
        type: string
        description: 'SSH tunnel name.'
      host:
        type: string
        description: 'Host, usually IPv4, for SSH tunnel.'
      local_port:
        type: integer
        description: 'Local source port for SSH tunnel.'
      remote_port:
        type: integer
        description: 'Remote port to establish SSH tunnel.'
      endpoint:
        type: string
        description: 'SSH tunnel destination endpoint.'
      username:
        type: string
        description: 'SSH tunnel user name.'
    required:
      - name
      - host
      - local_port
      - remote_port
      - endpoint
      - username
  SshTunnelData:
    type: object
    properties:
      name:
        description: 'SSH tunnel name.'
        type: string
      host:
        description: 'SSH tunnel host.'
        type: string
      local_port:
        description: 'SSH tunnel local port.'
        type: integer
      remote_port:
        description: 'SSH tunnel remote port.'
        type: integer
      endpoint:
        description: 'SSH tunnel endpoint.'
        type: string
      username:
        description: 'User name to establish SSH tunnel.'
        type: string
    required:
      - name
      - host
      - local_port
      - remote_port
      - endpoint
      - username
  SshTunnelError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'id field errors.'
        items:
          type: string
      name:
        type: array
        description: 'name field errors.'
        items:
          type: string
      host:
        type: array
        description: 'host field errors.'
        items:
          type: string
      local_port:
        type: array
        description: 'local_port field errors.'
        items:
          type: string
      remote_port:
        type: array
        description: 'remote_port field errors.'
        items:
          type: string
      endpoint:
        type: array
        description: 'endpoint field errors.'
        items:
          type: string
      username:
        type: array
        description: 'username field errors.'
        items:
          type: string
  Subscription:
    type: object
    properties:
      id:
        type: string
        description: 'Unique identifier for suscription as UUID.'
      plan:
        type: string
        description: 'Plan name.'
      stripe_id:
        type: string
        description: 'Stripe (payment processor) identifier.'
      created:
        type: string
        description: 'Date and time suscription was created.'
      livemode:
        type: boolean
        description: 'Suscription live, or not.'
      application_fee_percent:
        type: number
        description: 'Application fee percent.'
      cancel_at_period_end:
        type: boolean
        description: 'Boolean value to determine whether plan cancels at the end of the period, or not.'
      canceled_at:
        type: string
        description: 'Date and time when plan was cancelled.'
      current_period_start:
        type: string
        description: 'Current suscription plan start date.'
      current_period_end:
        type: string
        description: 'Current suscription plan end date.'
      start:
        type: string
        description: 'Date and time for when plan started.'
      ended_at:
        type: string
        description: 'Date and time for when plan ended.'
      quantity:
        type: integer
        description: 'Quantity purchased as integer.'
      status:
        type: string
        description: 'Suscription status.'
      trial_start:
        type: string
        description: 'Date and time for trial start.'
      trial_end:
        type: string
        description: 'Date and time for trial end.'
    required:
      - plan
  SubscriptionData:
    type: object
    properties:
      plan:
        description: 'Plan unique identifier.'
        type: string
    required:
      - plan
  SubscriptionError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: Errors not connected to any field
        items:
          type: string
      id:
        type: array
        description: id field errors
        items:
          type: string
      plan:
        type: array
        description: plan field errors
        items:
          type: string
      stripe_id:
        type: array
        description: stripe_id field errors
        items:
          type: string
      created:
        type: array
        description: created field errors
        items:
          type: string
      livemode:
        type: array
        description: livemode field errors
        items:
          type: string
      application_fee_percent:
        type: array
        description: application_fee_percent field errors
        items:
          type: string
      cancel_at_period_end:
        type: array
        description: cancel_at_period_end field errors
        items:
          type: string
      canceled_at:
        type: array
        description: canceled_at field errors
        items:
          type: string
      current_period_start:
        type: array
        description: current_period_start field errors
        items:
          type: string
      current_period_end:
        type: array
        description: current_period_end field errors
        items:
          type: string
      start:
        type: array
        description: start field errors
        items:
          type: string
      ended_at:
        type: array
        description: ended_at field errors
        items:
          type: string
      quantity:
        type: array
        description: quantity field errors
        items:
          type: string
      status:
        type: array
        description: status field errors
        items:
          type: string
      trial_start:
        type: array
        description: trial_start field errors
        items:
          type: string
      trial_end:
        type: array
        description: trial_end field errors
        items:
          type: string
  UserProfile:
    type: object
    properties:
      avatar:
        type: string
        format: byte
        description: "Avatar image"
      bio:
        type: string
        description: "Description of user's biography."
      url:
        type: string
        description: "Users's personal website."
      location:
        type: string
        description: "User location."
      company:
        type: string
        description: "User's company."
      timezone:
        type: string
        description: "User's time zone."
  UserProfileError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      bio:
        type: array
        description: 'Bio field errors.'
        items:
          type: string
      url:
        type: array
        description: 'URL field errors.'
        items:
          type: string
      location:
        type: array
        description: 'Location field errors.'
        items:
          type: string
      company:
        type: array
        description: 'Company field errors.'
        items:
          type: string
      timezone:
        type: array
        description: 'Timezone field errors.'
        items:
          type: string
  User:
    type: object
    properties:
      id:
        type: string
        description: 'User unique identifier, expressed as UUID.'
      username:
        type: string
        pattern: '[a-z0-9]{6,64}'
        minLength: 6
        maxLength: 64
        description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'
      email:
        type: string
        description: 'User email address.'
      first_name:
        type: string
        description: 'User first name.'
      last_name:
        type: string
        description: 'User last name.'
      profile:
        type: object
        description: 'User profile information.'
        $ref: '#/definitions/UserProfile'
    required:
      - username
      - profile
  UserData:
    type: object
    properties:
      username:
        description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'
        type: string
      email:
        description: 'User email.'
        type: string
      first_name:
        description: 'User first name.'
        type: string
      last_name:
        description: 'User last name.'
        type: string
      password:
        description: 'User password.'
        type: string
      profile:
        type: object
        description: 'User profile information is required, although attribute values may be empty.'
        $ref: '#/definitions/UserProfile'
    required:
      - username
      - password
      - profile
  UserError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      id:
        type: array
        description: 'id field errors.'
        items:
          type: string
      username:
        type: array
        description: 'Username field errors.'
        items:
          type: string
      email:
        type: array
        description: 'Email field errors.'
        items:
          type: string
      first_name:
        type: array
        description: 'First name field errors.'
        items:
          type: string
      last_name:
        type: array
        description: 'Last name field errors.'
        items:
          type: string
      password:
        type: array
        description: 'Password field errors.'
        items:
          type: string
      profile:
        $ref: '#/definitions/UserProfileError'
  VerifyJSONWebToken:
    type: object
    properties:
      token:
        type: string
        description: 'Varify JWT token.'
    required:
      - token
  VerifyJSONWebTokenData:
    type: object
    properties:
      token:
        description: 'JSON Web Token (JWT).'
        type: string
    required:
      - token
  VerifyJSONWebTokenError:
    type: object
    properties:
      non_field_errors:
        type: array
        description: 'Errors not connected to any field.'
        items:
          type: string
      token:
        type: array
        description: 'Token field errors.'
        items:
          type: string
  Webhook:
    type: object
    properties:
      url:
        type: string
        description: 'URL for webhook.'
      payload:
        type: object
        description: 'JSON with payload and webhook configurations.'
    required:
      - url
